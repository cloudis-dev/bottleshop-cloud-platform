def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def _compileSdkVersion = localProperties.getProperty('flutter.compileSdkVersion')
if (_compileSdkVersion == null) {
  _compileSdkVersion = 33
}

def _minSdkVersion = localProperties.getProperty('flutter.minSdkVersion')
if (_minSdkVersion == null) {
  _minSdkVersion = 26
}

def _targetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion')
if (_targetSdkVersion == null) {
  _targetSdkVersion = 32
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion _compileSdkVersion.toInteger()

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
        abortOnError false
    }

    defaultConfig {
        applicationId "sk.bottleshop3veze.bottleshopAdmin"
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        def keystoreProperties = new Properties()
        def keystorePropertiesFile = rootProject.file('key.properties')
        if (keystorePropertiesFile.exists()) {
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        }  else {
            keystoreProperties.setProperty('storePassword', System.getenv('STORE_PWD'))
            keystoreProperties.setProperty('keyAlias', System.getenv('KEY_ALIAS'))
            keystoreProperties.setProperty('keyPassword', System.getenv('STORE_PWD'))
            keystoreProperties.setProperty('storeFile', System.getenv('STORE_PATH'))

        }

        release {
            keyAlias keystoreProperties['keyAlias']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    flavorDimensions "default"
    productFlavors {
      production {
        dimension "default"
        applicationIdSuffix ""
//        versionNameSuffix ""
        manifestPlaceholders = [appName: "Bottleshop Admin"]
      }
      development {
        dimension "default"
        applicationIdSuffix ".dev"
//        versionNameSuffix ".dev"
        manifestPlaceholders = [appName: "[DEV] Bottleshop Admin"]
      }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '30.0.2'
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.google.firebase:firebase-messaging"
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
